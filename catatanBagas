âœ… FILAMENT
1. Setelah instalasi dan membuat user admin, buat resource yang dibutuhkan seperti Category, Ingredient, Recipe, dan lainnya.

2. Setelah resource berhasil dibuat, pastikan sudah terhubung dengan model terkait. Kemudian atur input form, validasi, dan kolom tampilannya.

3. Agar gambar dapat ditampilkan, ubah .env menjadi FILESYSTEM_DISK=public dan jalankan perintah php artisan storage:link.

4. Pada RecipeResource, tambahkan filter untuk Author dan Category dengan menggunakan SelectFilter dan relasi yang sesuai.

5. Untuk filter Ingredient, gunakan method query() karena relasinya bersifat many-to-many.

âœ… API
ðŸ”” Catatan Penting (NB):
Jika kamu membuat master resource yang memiliki banyak relasi anak, maka setiap relasi harus memiliki resource sendiri terlebih dahulu, agar bisa ditampilkan menggunakan ->whenLoaded(...) di dalam master resource.

6. Buat API Resource untuk Category menggunakan php artisan make:resource Api/CategoryResource, lalu atur data yang ingin ditampilkan di dalamnya.

7. Buat Controller-nya dengan php artisan make:controller Api/CategoryController, lalu buat method index dan show untuk menampilkan data.

8. Instal Laravel Sanctum atau API support lain jika diperlukan dengan perintah php artisan install:api (atau sesuai kebutuhan autentikasi API).

9. Buat juga resource untuk Ingredient, RecipeIngredient, RecipePhoto, RecipeTutorial, dan RecipeAuthor, lalu sesuaikan return datanya dengan kebutuhan masing-masing.

10. Pada Category uncommand recipes karena recipe resource sudah berhasil dibuat

11. buat Api untuk Search dengan buat Search Controller, dan buat endpoint kemudian test di postman dengan url = http://localhost/recipeApp/public/api/recipe/search?query=

12. pada Controller searchController buat public function index dan mendapatkan data dengan author
public function index (Request $request){
        // input adalah key pada url
        $quary = $request->input('query');
        $recipes = Recipe::with('author')->where('name', 'LIKE', "%{$quary}%")->get();
        return RecipeResource::collection($recipes);
    }

13. Pada Catgory Controller teparnya di public function show, agar data author muncul maka tambahkan relasi nya
     public function show(Category $category)
    {
        // mengurangi lazy loading dengan load
        $category->load(['recipes.category','recipes.author'])->orderBy('id');
        $category->loadCount('recipes');
        // ubah data kategori menjadi format JSON
        return new CategoryResource($category);
    }

===== Buat CORS untuk menentukan akses API yang kita buat =====
14. Buat CORS dengan php artisan config:publish cors

15. seting bagian 'allowed_origins' => ['*'], cth:
    'allowed_origins' => ['https://bagasresep.id'],

    maka hnya alamt itu saja yang boleh memakai API ini

16. Buat API Key untuk identitas pemakai API untuk mencegah data Bocor
    Buat model plus migration untuk APIKEY
    php artisam make:model ApiKey -m
    setelah itu atur untuk ApiKeyResource fillamet untuk CRUD
    php artisan make:filament-resource ApiKey
    atur input dan column

17. Buat Middleware untuk matching dengan key itu tadi
    php artisan make:middleware CheckApiKey
    Kemudian beri logika
    public function handle(Request $request, Closure $next): Response
    {
        $key = $request->header('X-API-KEY');

        if (!$key || !ApiKey::where('key',$key)->exists()) {
            # code...
            return response()->json(['message' => 'Unauthorized'],401);
        }
        return $next($request);
    }

18. Daftarkan middleware di app.php/bootstraps midleware alias
    agar mudah pemanggilan di Route. Cth : 'api_key'
    ->withMiddleware(function (Middleware $middleware): void {
        $middleware->alias(([
            'api_key' => \App\Http\Middleware\CheckApiKey::class
        ]));
    })

19. Kemudian buat group pada route dan berikan middlewarenya

